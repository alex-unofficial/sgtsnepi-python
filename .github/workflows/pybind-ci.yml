name: Build Wheels (Linux + macOS)
on:
  push:
    branches: [ "pybind" ]
  pull_request:
    branches: [ "pybind" ]
jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # You can also do a matrix of Python versions, but typically
          # cibuildwheel itself will handle multiple Python versions inside Docker (on Linux).
          python-version: 3.11

      - name: Upgrade pip & install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
 
      # ------------------------------------------
      # Build Wheels Using cibuildwheel
      # ------------------------------------------
      - name: Build Wheels
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_BEFORE_BUILD_MACOS: "brew update && brew install fftw"
          CIBW_BEFORE_BUILD_LINUX: "yum install -y fftw-devel"
          CIBW_BEFORE_BUILD_WINDOWS: |
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg; .\bootstrap-vcpkg.bat
            vcpkg install fftw

          
          # Only build 64-bit manylinux wheels, skip musllinux
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_SKIP: "*-musllinux_*"

          # Force a valid manylinux image (avoid date-based tags)
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64:latest"

          # Force the wheel's minimum macOS version to 14.0
          MACOSX_DEPLOYMENT_TARGET: "14.0"

        run: |
          # This will build wheels for all supported Python versions on the current OS.
          # By default, it runs a "pip wheel ." inside each Python interpreter environment.
          cibuildwheel --output-dir dist

      - name: Show built wheels
        run: ls -l dist