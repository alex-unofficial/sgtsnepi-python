name: Build Wheels (Linux + macOS)
on:
  push:
    branches: [ "pybind" ]
  pull_request:
    branches: [ "pybind" ]
jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] #, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # You can also do a matrix of Python versions, but typically
          # cibuildwheel itself will handle multiple Python versions inside Docker (on Linux).
          python-version: 3.11

      - name: Upgrade pip & install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel twine
 
      # ------------------------------------------
      # Build Wheels Using cibuildwheel
      # ------------------------------------------
      - name: Build Wheels
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_BEFORE_BUILD_MACOS: "brew update && brew install fftw"
          CIBW_BEFORE_BUILD_LINUX: "yum install -y fftw-devel"
          CIBW_BEFORE_BUILD_WINDOWS: "git clone https://github.com/microsoft/vcpkg.git && cd vcpkg && .\\bootstrap-vcpkg.bat && .\\vcpkg.exe install fftw3:x64-windows"
        # git clone https://github.com/microsoft/vcpkg.git
        # cd vcpkg 
        # .\bootstrap-vcpkg.bat
        # vcpkg install fftw

          # Only build 64-bit manylinux wheels, skip musllinux
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_SKIP: "*-win32 *-musllinux_*"

          # Force a valid manylinux image (avoid date-based tags)
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64:latest"

          # Force the wheel's minimum macOS version to 14.0
          MACOSX_DEPLOYMENT_TARGET: "14.0"

        run: |
          # This will build wheels for all supported Python versions on the current OS.
          # By default, it runs a "pip wheel ." inside each Python interpreter environment.
          python -m cibuildwheel --output-dir dist

      - name: Show built wheels
        run: ls -l dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # We'll name each artifact distinctly, so we can download them all later
          name: dist-${{ matrix.os }}
          path: dist/*

  publish:
    needs: [build-wheels]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Twine
        run: python -m pip install --upgrade twine

      # Download artifacts for *each* OS
      - name: Download artifacts from Ubuntu
        uses: actions/download-artifact@v4
        with:
          name: dist-ubuntu-latest
          path: dist
          if-no-files-found: ignore

      - name: Download artifacts from macOS
        uses: actions/download-artifact@v3
        with:
          name: dist-macos-latest
          path: dist
          if-no-files-found: ignore

      - name: Publish to PyPI
        run: |
          # If you need TestPyPI, use:
          python -m twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*
          # python -m twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}

